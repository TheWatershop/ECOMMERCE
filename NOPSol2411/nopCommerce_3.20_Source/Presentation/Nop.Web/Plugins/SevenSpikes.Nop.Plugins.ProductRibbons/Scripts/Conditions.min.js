/*
* Copyright 2013 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
* http://www.nop-templates.com/t/licensinginfo
*/

$(document).ready(function () { DisplayExistingConditions(); $("a.add-condition-group").click(function () { AddConditionGroup() }); $(".k-grid-toolbar a.k-grid-delete").livequery("click", function () { var a = $(this).closest(".condition-group-grid"); if (void 0 != a) { var c = $(a).attr("data-conditionGroupId"), a = $(a).attr("id"); void 0 != c && void 0 != a && DeleteConditionGroup(c, a) } }) }); $("#editor").livequery(function () { AddViewModel() }); $(window).unload(function () { var a = $.getHiddenValFromDom("#RibbonGeneralInformation_Id"); if (void 0 != a && 0 != a) { var a = $.getHiddenValFromDom("#Condition_delete-unused-condition-groups-url"), c = { conditionId: $.getHiddenValFromDom("#Condition_condition-id") }; $.ajax({ cache: !1, async: !1, type: "POST", data: $.toJSON(c), contentType: "application/json; charset=utf-8", url: a, success: function () { }, error: function () { alert("Deleting condition failed.") } }) } }); function DisplayExistingConditions() { var a = $.getHiddenValFromDom("#RibbonGeneralInformation_Id"); if (a && 0 != a && (a = $.parseJSON($.getHiddenValFromDom("#Condition_condition-groups")), null != a)) for (var c = 0; c < a.length; c++) AddConditionGroup(a[c]) } function AddConditionGroup(a) { if (a && 0 != a) AddConditionGroupGridHtml(a); else if (a = CreateConditionGroupAndAddConditionGroupGridHtml(), "" == a) return; addKendoGridForConditionGroup(a) } function addKendoGridForConditionGroup(a) { var c = "condition-group-grid-" + a, b = $.getHiddenValFromDom("#Condition_read-condition-group-url"), h = $.getHiddenValFromDom("#Condition_update-condition-statement-url"), j = $.getHiddenValFromDom("#Condition_destroy-condition-statement-url"), k = $.getHiddenValFromDom("#Condition_create-condition-statement-url"), d = {}, g = 0, f = new kendo.data.DataSource({ transport: { read: { url: b, dataType: "json", contentType: "application/json" }, update: { url: h, type: "POST", dataType: "json", contentType: "application/json" }, destroy: { url: j, dataType: "json", contentType: "application/json" }, create: { url: k, type: "POST", dataType: "json", contentType: "application/json" }, parameterMap: function (c, b) { if ("update" === b || "create" === b) return kendo.stringify(d); if ("read" === b) return { conditionGroupId: kendo.stringify(a) }; if ("destroy" === b) return { conditionStatementId: kendo.stringify(g) } } }, batch: !0, pageSize: 30, schema: { model: { id: "Id", fields: { Type: { type: "text" }, OperatorType: { type: "text" }, Text: { type: "text" }, Value: { type: "text" } } } } }); $("#" + c).kendoGrid({ dataSource: f, sortable: !0, editable: { mode: "popup", template: kendo.template($("#popup_editor").html()) }, edit: function (a) { a = a.model; void 0 != a.Type && (void 0 != a.OperatorType && void 0 != a.Value) && ($("#condition-type").attr("data-editValue", a.Type), $("#condition-operator").attr("data-editValue", a.OperatorType), $("#condition-value").attr("data-editValue", a.Value), $("#condition-num-value").attr("data-editValue", a.Value)) }, save: function (c) { d.ConditionGroupId = a; d.Type = $("#condition-type").val(); d.OperatorType = $("#condition-operator").val(); var b = $("#condition-value").parent().css("display"); d.Value = b && "none" == b ? $("#condition-num-value").val() : $("#condition-value").val(); if (void 0 != c.model.Type) for (var b = f.data(), e = 0; e < b.length; e++) b[e].Id == c.model.Id && (d.Id = c.model.Id, b[e].dirty = !0) }, remove: function (a) { if (void 0 != a.model.Id && "" != a.model.Id) for (var c = f.data(), b = 0; b < c.length; b++) c[b].Id == a.model.Id && (g = a.model.Id, c[b].dirty = !0) }, toolbar: ["create", "destroy"], columns: [{ field: "Id", title: "Id", width: 100, hidden: !0 }, { field: "Type", title: "Type", width: 100 }, { field: "OperatorType", title: "OperatorType", width: 100 }, { field: "Text", title: "Text", width: 250 }, { field: "Value", title: "Value", width: 200, hidden: !0 }, { command: ["edit", "destroy"], title: "&nbsp;", width: "150px" }] }) } function DeleteConditionGroup(a, c) { var b = $.getHiddenValFromDom("#Condition_delete-condition-group-url"); $.ajax({ cache: !1, type: "POST", data: $.toJSON({ conditionGroupId: a }), contentType: "application/json; charset=utf-8", url: b, success: function () { $("#" + c).data("kendoGrid").destroy(); $("#" + c).parent().remove() }, error: function () { alert("Deleting condition group failed.") } }) } function AddViewModel() { var a = kendo.observable({ typeSource: GetConditionTypes(), selectedType: null, selectedOperator: null, selectedValue: null }); a.selectedType = SetSelectedType(a.typeSource); a.selectedOperator = function () { var a = $("#condition-operator").attr("data-editValue"); return void 0 != a && "" != a ? a : null }; a.selectedValue = function () { var a = $("#condition-value").parent().css("display"), b = $("#condition-value").attr("data-editValue"); a && "none" == a && (b = $("#condition-num-value").attr("data-editValue")); return void 0 != b && "" != b ? b : null }; kendo.bind($("#editor"), a) } function SetSelectedType(a) { var c = $("#condition-type").attr("data-editValue"); if (void 0 != c && "" != c) for (var b = 0; b < a.length; b++) if (a[b].Type == c) return a[b]; return null } function GetConditionTypes() { var a = $.getHiddenValFromDom("#Condition_get-condition-type-url"), c; $.ajax({ cache: !1, async: !1, type: "GET", contentType: "application/json; charset=utf-8", url: a, success: function (a) { c = a }, error: function () { alert("Retrieving condition types failed.") } }); return c } function CreateConditionGroupAndAddConditionGroupGridHtml() { var a = $.getHiddenValFromDom("#Condition_create-condition-group-url"), c = $.getHiddenValFromDom("#Condition_condition-id"); if ("" == a || "" == c) return 0; var b = ""; $.ajax({ cache: !1, async: !1, type: "POST", data: $.toJSON({ conditionId: c }), contentType: "application/json; charset=utf-8", url: a, success: function (a) { b = a; AddConditionGroupGridHtml(b) }, error: function () { alert("Creating new condition group failed.") } }); return b } function AddConditionGroupGridHtml(a) { $("#condition-groups").append('<div><div class="condition-group-grid" id="condition-group-grid-' + a + '" data-conditionGroupId="' + a + '"></div><div class="group-dependancy-text"><p>--OR--</p></div></div>') };